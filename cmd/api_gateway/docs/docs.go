// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/adminlogin": {
            "post": {
                "description": "Authenticate admin user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Admin login request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pb.AdminLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin successfully logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "502": {
                        "description": "Error parsing request body or connecting to authentication service",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/adminsignup": {
            "post": {
                "description": "Register a new admin account",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Admin signup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Admin email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Admin password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Admin username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Admin phone number",
                        "name": "phonenum",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Admin bio",
                        "name": "bio",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Admin gender",
                        "name": "gender",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Admin profile picture",
                        "name": "profile_picture",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully registered admin data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request, error parsing form or missing required fields",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "502": {
                        "description": "Error connecting to authentication service",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/block": {
            "post": {
                "description": "Block a user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Block user",
                "parameters": [
                    {
                        "description": "Block user request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pb.BlockUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin successfully blocked user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "502": {
                        "description": "Error parsing request body or connecting to authentication service",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/checkBlock": {
            "post": {
                "description": "Check the block status of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Check if user is blocked",
                "parameters": [
                    {
                        "description": "Check user blocked request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pb.CheckUserBlockedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User block status checked successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request, error parsing request body or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "502": {
                        "description": "Error connecting to authentication service",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/admin/unblock": {
            "post": {
                "description": "Unblock a user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Unblock user",
                "parameters": [
                    {
                        "description": "Unblock user request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pb.UnblockUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin successfully unblocked user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "502": {
                        "description": "Error parsing request body or connecting to authentication service",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/fetchUser": {
            "get": {
                "description": "Fetch short details of a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Fetch short details",
                "parameters": [
                    {
                        "description": "Fetch short details request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pb.FetchShortDetailsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully fetched short details",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request, error parsing request body or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "502": {
                        "description": "Error connecting to authentication service",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Logs in a user by accepting a JSON login request and returning a response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Logs in a user.",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pb.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully logged in",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid login request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway: Error connecting to auth service",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with the provided information",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's email address",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User's password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User's phone number",
                        "name": "phonenum",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User's username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User's bio",
                        "name": "bio",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "User's gender",
                        "name": "gender",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "User's profile picture",
                        "name": "profile_picture",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "502": {
                        "description": "Bad Gateway",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        },
        "/auth/resetPassword": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Reset password for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer \u003ctoken\u003e",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Reset password request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pb.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New password successfully updated",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "400": {
                        "description": "Bad request, error parsing request body or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized, error parsing user ID",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    },
                    "502": {
                        "description": "Error connecting to authentication service",
                        "schema": {
                            "$ref": "#/definitions/models.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "pb.AdminLoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "pb.BlockUserRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer"
                }
            }
        },
        "pb.CheckUserBlockedRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "pb.FetchShortDetailsRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "pb.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "pb.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "pb.UnblockUserRequest": {
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "ECHO-HUB-SOCIAL-MEADIA",
	Description:      "WELCOME TO ECHO-HUB",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
